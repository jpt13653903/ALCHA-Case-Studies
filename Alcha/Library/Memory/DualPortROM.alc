class DualPortROM(net Clk, net Reset, num Width, num Depth){
  public num Initial[Depth];
  //----------------------------------------------------------------------------

  private{
    string RamBlockType;
    switch('target_series){
      case("MAX 10"   ) RamBlockType = "M9K";
      case("Cyclone V") RamBlockType = "M10K";
      case("Arria 10" ) RamBlockType = "M20K";
      default           assert(false);
    }
    num AddressWidth = ceil(log2(Depth));

    // Generate filename using attributes to get the instance name of the class
    MIF_File = :[this'identifier, ".mif"];

    hdl() altsyncram (
      address_aclr_b                     = "NONE";
      address_reg_b                      = "CLOCK1";
      clock_enable_input_a               = "NORMAL";
      clock_enable_input_b               = "NORMAL";
      clock_enable_output_a              = "BYPASS";
      clock_enable_output_b              = "BYPASS";
      indata_reg_b                       = "CLOCK1";
      init_file                          = MIF_File;
      intended_device_family             = 'target_series;
      lpm_type                           = "altsyncram";
      maximum_depth                      = 1024;
      numwords_a                         = Depth;
      numwords_b                         = Depth;
      operation_mode                     = "BIDIR_DUAL_PORT";
      outdata_aclr_a                     = "NONE";
      outdata_aclr_b                     = "NONE";
      outdata_reg_a                      = "UNREGISTERED";
      outdata_reg_b                      = "UNREGISTERED";
      power_up_uninitialized             = "FALSE";
      ram_block_type                     = RamBlockType;
      read_during_write_mode_mixed_ports = "DONT_CARE";
      widthad_a                          = AddressWidth;
      widthad_b                          = AddressWidth;
      width_a                            = Width;
      width_b                            = Width;
      width_byteena_a                    = 1;
      width_byteena_b                    = 1;
      wrcontrol_wraddress_reg_b          = "CLOCK1";
    ){
      net               clock0 = Clk;
      net               clocken0;
      net(AddressWidth) address_a;
      net(Width       ) q_a;

      net               clock1 = Clk;
      net               clocken1;
      net(AddressWidth) address_b;
      net(Width       ) q_b;
    };
    altsyncram() ROM;
  }
  //----------------------------------------------------------------------------

  public{
    input  net               ClkEnable_A = 1;
    input  net(AddressWidth) Address_A   = 0;
    output net(Width)        Data_A;

    input  net               ClkEnable_B = 1;
    input  net(AddressWidth) Address_B   = 0;
    output net(Width)        Data_B;

    ROM.clocken0  = ClkEnable_A;
    ROM.address_a = Address_A;
    Data_A       := ROM.q_a;

    ROM.clocken1  = ClkEnable_B;
    ROM.address_b = Address_B;
    Data_B       := ROM.q_b;
  }

  void finally(){
    char Buffer[] = :[
      "-- Autogenerated by DualPortROM.alc\n",
      "\n",
      "WIDTH=", $(Width), ";\n",
      "DEPTH=", $(Depth), ";\n",
      "\n",
      "ADDRESS_RADIX=HEX;\n",
      "DATA_RADIX=HEX;\n",
      "\n",
      "CONTENT BEGIN\n"
    ];

    num n = 0;
    for(Value in Initial){
      Buffer.append(:["  ", $(n, "04X"), ": ", $(Value, "08X"), ";\n"]);
      n++;
    }
    Buffer.append("END;\n");

    textwrite(MIF_File, Buffer);
  }
}
//------------------------------------------------------------------------------

