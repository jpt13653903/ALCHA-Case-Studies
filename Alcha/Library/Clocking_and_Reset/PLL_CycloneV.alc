// Output_MHz expects an array of num
class PLL_CycloneV(net Clk, net Reset, Output_MHz){
  private{
    num N = Output_MHz'length;
    num OutputFreq[17];

    for(n in 0..16){
      if(n < N) OutputFreq[n] = Output_MHz[n];
      else      OutputFreq[n] = 0;
    }

    hdl() altera_pll (
      fractional_vco_multiplier = "false";
      reference_clock_frequency = :[$(Clk'frequency / 1e6), " MHz"];
      operation_mode            = "direct";
      number_of_clocks          = N;
      output_clock_frequency0   = :[$(OutputFreq[0]), " MHz"];
      phase_shift0              = "0 ps";
      duty_cycle0               = 50;
      output_clock_frequency1   = :[$(OutputFreq[1]), " MHz"];
      phase_shift1              = "0 ps";
      duty_cycle1               = 50;
      output_clock_frequency2   = :[$(OutputFreq[2]), " MHz"];
      phase_shift2              = "0 ps";
      duty_cycle2               = 50;
      output_clock_frequency3   = :[$(OutputFreq[3]), " MHz"];
      phase_shift3              = "0 ps";
      duty_cycle3               = 50;
      output_clock_frequency4   = :[$(OutputFreq[4]), " MHz"];
      phase_shift4              = "0 ps";
      duty_cycle4               = 50;
      output_clock_frequency5   = :[$(OutputFreq[5]), " MHz"];
      phase_shift5              = "0 ps";
      duty_cycle5               = 50;
      output_clock_frequency6   = :[$(OutputFreq[6]), " MHz"];
      phase_shift6              = "0 ps";
      duty_cycle6               = 50;
      output_clock_frequency7   = :[$(OutputFreq[7]), " MHz"];
      phase_shift7              = "0 ps";
      duty_cycle7               = 50;
      output_clock_frequency8   = :[$(OutputFreq[8]), " MHz"];
      phase_shift8              = "0 ps";
      duty_cycle8               = 50;
      output_clock_frequency9   = :[$(OutputFreq[9]), " MHz"];
      phase_shift9              = "0 ps";
      duty_cycle9               = 50;
      output_clock_frequency10  = :[$(OutputFreq[10]), " MHz"];
      phase_shift10             = "0 ps";
      duty_cycle10              = 50;
      output_clock_frequency11  = :[$(OutputFreq[11]), " MHz"];
      phase_shift11             = "0 ps";
      duty_cycle11              = 50;
      output_clock_frequency12  = :[$(OutputFreq[12]), " MHz"];
      phase_shift12             = "0 ps";
      duty_cycle12              = 50;
      output_clock_frequency13  = :[$(OutputFreq[13]), " MHz"];
      phase_shift13             = "0 ps";
      duty_cycle13              = 50;
      output_clock_frequency14  = :[$(OutputFreq[14]), " MHz"];
      phase_shift14             = "0 ps";
      duty_cycle14              = 50;
      output_clock_frequency15  = :[$(OutputFreq[15]), " MHz"];
      phase_shift15             = "0 ps";
      duty_cycle15              = 50;
      output_clock_frequency16  = :[$(OutputFreq[16]), " MHz"];
      phase_shift16             = "0 ps";
      duty_cycle16              = 50;
      output_clock_frequency17  = :[$(OutputFreq[17]), " MHz"];
      phase_shift17             = "0 ps";
      duty_cycle17              = 50;
      pll_type                  = "General";
      pll_subtype               = "General";
    ){
      net    refclk = Clk;
      net    rst    = Reset;
      net    fbclk  = 0;
      net(N) outclk;
      net    locked;
      net    fboutclk;
    }
    altera_pll() PLL;
  }

  public{
    net Locked = PLL.locked;
    net Output[N];

    for(n in 0..N-1){
      Output[n]'frequency = Output_MHz * 1e6;
      Output[n] = PLL.outclk[n];
    }
  }
}

