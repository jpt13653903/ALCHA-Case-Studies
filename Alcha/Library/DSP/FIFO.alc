import "../Memory/DualPortRAM";
//------------------------------------------------------------------------------

class FIFO(net Clk, net Reset, num Length){
  DataStream Run(Input){
    num Width = Input.Data'width;

    DualPortRAM(Clk, Reset, Width+2, Length) RAM;

    // Create new stream instance for the output
    result = DataStream(Width, -1);

    RAM.WrAddress = 0;
    RAM.WrData   := :(Input.SoP, Input.EoP, Input.Data);
    RAM.WrEnable  = Input.Valid;

    RAM.RdEnable  = Output.Ready;
    RAM.RdAddress = 0;

    rtl(Clk, Reset){ // Input
      if(Input.Valid) RAM.WrAddress++;
    }

    net Valid = 0; // Takes care of the RAM read latency
    num(RAM.RdAddress'width) NumItems = RAM.WrAddress - RAM.RdAddress;

    rtl(Clk, Reset, result.Ready){ // Output
      :(result.SoP, result.EoP, result.Data) := RAM.RdData;
      result.Valid = Valid;

      if(NumItems != 0){
        Valid = 1;
        RAM.RdAddress++;
      }else{
        Valid = 0;
      }
    }
  }
}
//------------------------------------------------------------------------------

DataStream operator| (Input, FIFO Queue){
  AddDebug(Input.SoP);
  AddDebug(Input.EoP);
  AddDebug(Input.Valid);
  AddDebug(result.Ready);
  return Queue.Run(Input);
}
//------------------------------------------------------------------------------

